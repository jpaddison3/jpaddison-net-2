// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           RoleType @default(USER)

  tokens      Token[]
  sessions    Session[]
  Integration Integration[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

enum RoleType {
  USER
  ADMIN
}

// TODO: add check constraint where servicetype tells you what secret is required
model Integration {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String?
  service   ServiceType
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  webhook   String // ?
  // OAuthGrant OAuthGrant?
}

// model OAuthGrant {
//   id            Int         @id @default(autoincrement())
//   accessToken   String
//   expiresIn     Int
//   tokenType     String
//   refreshToken  String
//   data          Json
//   Integration   Integration @relation(fields: [integrationId], references: [id])
//   integrationId Int
// }

// model WebhookIntegration {}

enum ServiceType {
  ZAPIER // WEBHOOK?
  // ASANA
  // TODOIST
  // REMNOTE
  // ROAM
  // EVERNOTE
  // EMAIL?
  // GOOGLE REMINDERS?
}
